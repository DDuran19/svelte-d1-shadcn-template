CREATE TABLE `users` (
	`id` text PRIMARY KEY NOT NULL,
	`avatar` text NOT NULL,
	`first_name` text NOT NULL,
	`last_name` text NOT NULL,
	`email` text NOT NULL,
	`hashed_password` text NOT NULL,
	`tester` integer NOT NULL,
	`super_admin` integer NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text,
	`updated_by_id` text,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `announcements` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`type` text NOT NULL,
	`priority` text NOT NULL,
	`title` text NOT NULL,
	`short_description` text NOT NULL,
	`description` text NOT NULL,
	`target_user_ids` text NOT NULL,
	`from` integer,
	`to` integer,
	`target_company_ids` text NOT NULL,
	`acknowledged_user_ids` text NOT NULL,
	`do_not_show_user_ids` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `branch_members` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`branch_id` text NOT NULL,
	`role_id` text,
	`user_id` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`branch_id`) REFERENCES `branches`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`role_id`) REFERENCES `branch_roles`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `branch_roles` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`branch_id` text NOT NULL,
	`name` text NOT NULL,
	`permissions` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`branch_id`) REFERENCES `branches`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `branches` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`code` text NOT NULL,
	`name` text NOT NULL,
	`address` text NOT NULL,
	`company_id` text NOT NULL,
	`email` text NOT NULL,
	`owner_id` text NOT NULL,
	`status` integer NOT NULL,
	`thumbnail` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`company_id`) REFERENCES `companies`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`owner_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `companies` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`code` text NOT NULL,
	`name` text NOT NULL,
	`thumbnail` text NOT NULL,
	`email` text NOT NULL,
	`address` text NOT NULL,
	`owner_id` text NOT NULL,
	`status` integer NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`owner_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `company_members` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`company_id` text NOT NULL,
	`role_id` text,
	`user_id` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`company_id`) REFERENCES `companies`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`role_id`) REFERENCES `company_roles`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `company_roles` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`company_id` text NOT NULL,
	`permissions` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`company_id`) REFERENCES `companies`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `sessions` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`user_id` text NOT NULL,
	`user_name` text NOT NULL,
	`session_data` text NOT NULL,
	`request_info` text NOT NULL,
	`expires_at` integer NOT NULL,
	`active` integer NOT NULL,
	`last_active_at` integer NOT NULL,
	`last_updated_at` integer NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `features` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`status` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `categories` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`description` text NOT NULL,
	`note` text NOT NULL,
	`status` integer NOT NULL,
	`archived` integer NOT NULL,
	`archived_by_user_id` text,
	`archived_by_name` text NOT NULL,
	`archived_at` integer,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`archived_by_user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `invoice_numbers` (
	`invoice_number` integer NOT NULL,
	`type` text NOT NULL,
	`from_company_id` text,
	`from_branch_id` text,
	`code` text NOT NULL,
	`year_issued` integer NOT NULL,
	`month_issued` integer NOT NULL,
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	FOREIGN KEY (`from_company_id`) REFERENCES `companies`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`from_branch_id`) REFERENCES `branches`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `items` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`description` text NOT NULL,
	`note` text NOT NULL,
	`status` integer NOT NULL,
	`archived` integer NOT NULL,
	`archived_by_user_id` text,
	`archived_by_name` text NOT NULL,
	`archived_at` integer,
	`type` text NOT NULL,
	`supplier_id` text,
	`thumbnail` text NOT NULL,
	`made_from` text NOT NULL,
	`base_price` integer NOT NULL,
	`base_cost` integer NOT NULL,
	`purchase_price` integer NOT NULL,
	`unit_of_measure` text NOT NULL,
	`quantity_per_uom` integer NOT NULL,
	`recovery_rate` integer NOT NULL,
	`subcategory_ids` text NOT NULL,
	`attributes` text NOT NULL,
	`sku` text NOT NULL,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`archived_by_user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`supplier_id`) REFERENCES `suppliers`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `purchase_items` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`invoice_number` text NOT NULL,
	`purchase_id` text NOT NULL,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	`purchase_start_of_date` integer NOT NULL,
	`purchase_date` integer NOT NULL,
	`supplier_id` text,
	`item_id` text NOT NULL,
	`item_name` text NOT NULL,
	`item_type` text NOT NULL,
	`item_category_name` text NOT NULL,
	`item_subcategory_name` text NOT NULL,
	`made_from` text NOT NULL,
	`quantity` integer NOT NULL,
	`unit_price` integer NOT NULL,
	`unit` text NOT NULL,
	`discount` integer NOT NULL,
	`total_price` integer NOT NULL,
	`grand_total_price` integer NOT NULL,
	`status` text NOT NULL,
	`returned_quantity` integer NOT NULL,
	`returned_by_name` text NOT NULL,
	`returned_date` integer,
	`returned_reason` text NOT NULL,
	`cancelled_quantity` integer NOT NULL,
	`cancelled_by_name` text NOT NULL,
	`cancelled_date` integer,
	`cancelled_reason` text NOT NULL,
	`received_quantity` integer NOT NULL,
	`received_by_name` text NOT NULL,
	`received_date` integer,
	`received_notes` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`purchase_id`) REFERENCES `purchases`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`supplier_id`) REFERENCES `suppliers`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `purchases` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`description` text NOT NULL,
	`note` text NOT NULL,
	`status` integer NOT NULL,
	`invoice_number` text NOT NULL,
	`purchase_start_of_date` integer NOT NULL,
	`purchase_date` integer NOT NULL,
	`total_paid` integer NOT NULL,
	`total_price` integer NOT NULL,
	`total_discount` integer NOT NULL,
	`grand_total_price` integer NOT NULL,
	`processed_by_user_id` text NOT NULL,
	`processed_by_name` text NOT NULL,
	`payment_method` text NOT NULL,
	`payment_status` text NOT NULL,
	`purchase_status` text NOT NULL,
	`supplier_id` text,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`processed_by_user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`supplier_id`) REFERENCES `suppliers`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `sale_items` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`invoice_number` text NOT NULL,
	`sale_id` text NOT NULL,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	`sale_start_of_date` integer NOT NULL,
	`sale_date` integer NOT NULL,
	`item_id` text NOT NULL,
	`item_name` text NOT NULL,
	`item_type` text NOT NULL,
	`item_category_name` text NOT NULL,
	`item_subcategory_name` text NOT NULL,
	`made_from` text NOT NULL,
	`quantity` integer NOT NULL,
	`unit_price` integer NOT NULL,
	`unit` text NOT NULL,
	`discount` integer NOT NULL,
	`total_price` integer NOT NULL,
	`grand_total_price` integer NOT NULL,
	`status` text NOT NULL,
	`returned_quantity` integer NOT NULL,
	`returned_by_name` text NOT NULL,
	`returned_date` integer,
	`returned_reason` text NOT NULL,
	`cancelled_quantity` integer NOT NULL,
	`cancelled_by_name` text NOT NULL,
	`cancelled_date` integer,
	`cancelled_reason` text NOT NULL,
	`received_quantity` integer NOT NULL,
	`received_by_name` text NOT NULL,
	`received_date` integer,
	`received_notes` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`sale_id`) REFERENCES `sales`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `sales` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`description` text NOT NULL,
	`note` text NOT NULL,
	`status` integer NOT NULL,
	`invoice_number` text NOT NULL,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	`sale_start_of_date` integer NOT NULL,
	`sale_date` integer NOT NULL,
	`total_paid` integer NOT NULL,
	`total_price` integer NOT NULL,
	`total_discount` integer NOT NULL,
	`grand_total_price` integer NOT NULL,
	`processed_by_user_id` text NOT NULL,
	`processed_by_name` text NOT NULL,
	`payment_method` text NOT NULL,
	`payment_status` text NOT NULL,
	`sale_status` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`processed_by_user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `subcategories` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`description` text NOT NULL,
	`note` text NOT NULL,
	`status` integer NOT NULL,
	`archived` integer NOT NULL,
	`archived_by_user_id` text,
	`archived_by_name` text NOT NULL,
	`archived_at` integer,
	`category_id` text NOT NULL,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`archived_by_user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`category_id`) REFERENCES `categories`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
CREATE TABLE `suppliers` (
	`id` text PRIMARY KEY NOT NULL,
	`created_at` integer NOT NULL,
	`updated_at` integer NOT NULL,
	`created_by_id` text NOT NULL,
	`updated_by_id` text NOT NULL,
	`name` text NOT NULL,
	`description` text NOT NULL,
	`note` text NOT NULL,
	`status` integer NOT NULL,
	`archived` integer NOT NULL,
	`archived_by_user_id` text,
	`archived_by_name` text NOT NULL,
	`archived_at` integer,
	`email` text NOT NULL,
	`phone` text NOT NULL,
	`address` text NOT NULL,
	`owned_by_id` text NOT NULL,
	`owned_by_type` text NOT NULL,
	FOREIGN KEY (`created_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`updated_by_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action,
	FOREIGN KEY (`archived_by_user_id`) REFERENCES `users`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
INSERT INTO `users` 
    (id, avatar, first_name, last_name, email, hashed_password, tester, super_admin, created_at, updated_at, created_by_id, updated_by_id)
VALUES
    ('0000-0000-0000-0000', '', 'System', 'Administrator', 'denver02.james14@gmail.com', '$2a$10$Vkngx8aWEOE3k0mNuae2UObdz3D5sGHPcn3NTL4bFehcnKxU5sPCm', 0, 1, unixepoch(), unixepoch(), '0000-0000-0000-0000', '0000-0000-0000-0000');


--> statement-breakpoint
INSERT INTO `features` 
    (id, created_at, created_by_id, updated_at, updated_by_id, name, status)
VALUES
    ('feat_0001', unixepoch(), '0000-0000-0000-0000', unixepoch(), '0000-0000-0000-0000', 'login', 'on');
